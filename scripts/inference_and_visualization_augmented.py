# -*- coding: utf-8 -*-
"""inference_and_visualization_augmented.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y7LH5t1lrc_T-T-bJUNgq0PwH7wcJTzz
"""

# run batch inference on augmented sonar dataset and save predictions + visuals

import os
import cv2
import torch
import numpy as np
import pandas as pd
from PIL import Image
from pathlib import Path
from torchvision.transforms import ToTensor
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor

# project paths
PROJECT_ROOT = Path("/content/drive/MyDrive/sonar-object-detection")
IMG_DIR = PROJECT_ROOT / "data" / "line2voc_preprocessed_augmented" / "JPEGImages"
MODEL_PATH = PROJECT_ROOT / "checkpoints" / "augmented_fasterrcnn.pth"
OUTPUT_DIR = PROJECT_ROOT / "outputs" / "vis_augmented"
PRED_CSV = PROJECT_ROOT / "outputs" / "preds_augmented.csv"

# make sure output folders exist
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# load model
model = fasterrcnn_resnet50_fpn(weights="DEFAULT")
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features, 3)
model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
model.to(device)
model.eval()

# prediction storage
all_preds = []

# run inference
transform = ToTensor()
for img_path in IMG_DIR.glob("*.jpg"):
    img = Image.open(img_path).convert("RGB")
    img_tensor = transform(img).unsqueeze(0).to(device)

    with torch.no_grad():
        output = model(img_tensor)[0]

    boxes = output["boxes"].cpu()
    scores = output["scores"].cpu()
    labels = output["labels"].cpu()

    # convert back to OpenCV
    img_np = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

    for i in range(len(boxes)):
        score = scores[i].item()
        if score < 0.5:
            continue

        x1, y1, x2, y2 = boxes[i].int().tolist()
        class_id = labels[i].item()

        # save box info
        all_preds.append({
            "filename": img_path.name,
            "class_id": class_id,
            "score": score,
            "xmin": x1,
            "ymin": y1,
            "xmax": x2,
            "ymax": y2,
        })

        # draw
        cv2.rectangle(img_np, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(img_np, f"{score:.2f}", (x1, y1 - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)

    out_path = OUTPUT_DIR / img_path.name
    cv2.imwrite(str(out_path), img_np)

# save preds
df = pd.DataFrame(all_preds)
df.to_csv(PRED_CSV, index=False)

print(f"Visuals saved to: {OUTPUT_DIR}")
print(f"Predictions saved to: {PRED_CSV}")