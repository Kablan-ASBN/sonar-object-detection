# -*- coding: utf-8 -*-
"""preprocess_with_clahe_and_aug.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ds6hc5Y_h4cYFFlosMwYjovULx8bzAS
"""

# scripts/preprocess_with_clahe_and_aug.py
# Apply median blur + CLAHE + augmentations to sonar images
# and save structured VOC dataset to new folder

from pathlib import Path
import cv2, os, shutil, random, numpy as np

# Set project paths (for Colab)
PROJECT_ROOT = Path("/content/drive/MyDrive/sonar-object-detection")
SRC_IMG_DIR = PROJECT_ROOT / "data" / "line2voc" / "JPEGImages"
SRC_ANN_DIR = PROJECT_ROOT / "data" / "line2voc" / "Annotations"
SRC_SPLIT_DIR = PROJECT_ROOT / "data" / "line2voc" / "ImageSets" / "Main"
DEST_ROOT = PROJECT_ROOT / "data" / "line2voc_preprocessed_augmented"
DEST_IMG_DIR = DEST_ROOT / "JPEGImages"
DEST_ANN_DIR = DEST_ROOT / "Annotations"
DEST_SPLIT_DIR = DEST_ROOT / "ImageSets" / "Main"

DEST_IMG_DIR.mkdir(parents=True, exist_ok=True)
DEST_ANN_DIR.mkdir(parents=True, exist_ok=True)
DEST_SPLIT_DIR.mkdir(parents=True, exist_ok=True)

def apply_clahe(img):
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)
    return cv2.cvtColor(cv2.merge((cl, a, b)), cv2.COLOR_LAB2BGR)

def apply_augmentations(img):
    if random.random() < 0.5:
        img = cv2.flip(img, 1)
    angle = random.uniform(-10, 10)
    h, w = img.shape[:2]
    M = cv2.getRotationMatrix2D((w // 2, h // 2), angle, 1.0)
    img = cv2.warpAffine(img, M, (w, h), borderMode=cv2.BORDER_REFLECT101)
    brightness = random.uniform(0.9, 1.1)
    contrast = random.uniform(0.9, 1.1)
    img = np.clip(contrast * img + brightness * 10, 0, 255).astype(np.uint8)
    return img

# Apply median → CLAHE → Augmentation
count = 0
for img_path in SRC_IMG_DIR.glob("*.jpg"):
    img = cv2.imread(str(img_path))
    if img is None:
        continue
    img = cv2.medianBlur(img, 3)
    img = apply_clahe(img)
    img = apply_augmentations(img)
    out_path = DEST_IMG_DIR / img_path.name
    cv2.imwrite(str(out_path), img)
    count += 1

print(f"{count} images processed and saved to: {DEST_IMG_DIR}")

# Copy annotations and splits
for xml in SRC_ANN_DIR.glob("*.xml"):
    shutil.copy(xml, DEST_ANN_DIR)
for split in SRC_SPLIT_DIR.glob("*.txt"):
    shutil.copy(split, DEST_SPLIT_DIR)

print("Annotations and split files copied.")