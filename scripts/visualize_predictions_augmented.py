# -*- coding: utf-8 -*-
"""visualize_predictions_augmented.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TLxavyNsqgjBhFv7JH0z2rUpuMcWse-F
"""

# visualize predictions from Faster R-CNN model trained on augmented sonar data

import os
import cv2
import torch
import numpy as np
from PIL import Image
from pathlib import Path
from torchvision.transforms import ToTensor
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor

# use full path to the dataset and model
PROJECT_ROOT = Path("/content/drive/MyDrive/sonar-object-detection")
IMG_DIR = PROJECT_ROOT / "data" / "line2voc_preprocessed_augmented" / "JPEGImages"
MODEL_PATH = PROJECT_ROOT / "checkpoints" / "augmented_fasterrcnn.pth"
OUTPUT_DIR = PROJECT_ROOT / "outputs" / "vis_augmented"

# make sure output folder exists
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# setup device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# load model
model = fasterrcnn_resnet50_fpn(weights="DEFAULT")
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features, 3)
model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
model.to(device)
model.eval()

# run inference on a few images
transform = ToTensor()
img_paths = list(IMG_DIR.glob("*.jpg"))[:5]

for img_path in img_paths:
    img = Image.open(img_path).convert("RGB")
    img_tensor = transform(img).unsqueeze(0).to(device)

    with torch.no_grad():
        output = model(img_tensor)[0]

    boxes = output["boxes"].cpu()
    scores = output["scores"].cpu()
    labels = output["labels"].cpu()

    # convert image back to OpenCV format
    img_np = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)

    for i in range(len(boxes)):
        score = scores[i].item()
        if score < 0.5:
            continue

        x1, y1, x2, y2 = boxes[i].int().tolist()
        class_id = labels[i].item()

        cv2.rectangle(img_np, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(img_np, f"{score:.2f}", (x1, y1 - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 0), 1)

    out_path = OUTPUT_DIR / img_path.name
    cv2.imwrite(str(out_path), img_np)

print(f"Saved predictions to: {OUTPUT_DIR}")