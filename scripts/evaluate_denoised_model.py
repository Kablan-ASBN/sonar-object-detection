# -*- coding: utf-8 -*-
"""evaluate_denoised_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WzAOqlfV5vXioJAp-SLPeDAP7HMqYVUv
"""

# evaluate_denoised_model.py
# Evaluate the Faster R-CNN trained on denoised sonar data

import sys
sys.path.append('/content/drive/MyDrive/sonar-object-detection/scripts')
from voc_dataset import VOCDataset

import torch
from torchvision.transforms import ToTensor
from torch.utils.data import DataLoader
from torchmetrics.detection.mean_ap import MeanAveragePrecision
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from torchvision.models.detection.faster_rcnn import FastRCNNPredictor

# Load model architecture
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = fasterrcnn_resnet50_fpn(weights=None)

# Adjust head for 3 classes
num_classes = 3
in_features = model.roi_heads.box_predictor.cls_score.in_features
model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

# Load trained weights from denoised model
model.load_state_dict(torch.load("/content/drive/MyDrive/sonar-object-detection/checkpoints/denoised_fasterrcnn.pth", map_location=device))

# Evaluate on validation set from preprocessed dataset
def evaluate(model, dataset_root, batch_size=4, image_set="val"):
    model.eval()
    model.to(device)

    dataset = VOCDataset(dataset_root, image_set=image_set, transforms=ToTensor())
    loader = DataLoader(dataset, batch_size=batch_size, shuffle=False, collate_fn=lambda x: tuple(zip(*x)))

    metric = MeanAveragePrecision()

    with torch.no_grad():
        for imgs, targets in loader:
            imgs = list(img.to(device) for img in imgs)
            targets = [{k: v.to(device) for k, v in t.items()} for t in targets]

            outputs = model(imgs)

            preds = []
            targs = []
            for o, t in zip(outputs, targets):
                preds.append({
                    "boxes": o["boxes"].cpu(),
                    "scores": o["scores"].cpu(),
                    "labels": o["labels"].cpu()
                })
                targs.append({
                    "boxes": t["boxes"].cpu(),
                    "labels": t["labels"].cpu()
                })

            metric.update(preds, targs)

    results = metric.compute()
    print("Evaluation Results (Denoised Model):")
    for k, v in results.items():
        print(f"{k}: {v:.4f}")

# Run evaluation on denoised dataset
evaluate(model, "/content/drive/MyDrive/sonar-object-detection/data/line2voc_preprocessed")